{"ast":null,"code":"import * as cookie from 'cookie';\nimport { hasDocumentCookie, parseCookies, readCookie } from './utils';\nexport default class Cookies {\n  constructor(cookies, options) {\n    this.changeListeners = [];\n    this.HAS_DOCUMENT_COOKIE = false;\n    this.cookies = parseCookies(cookies, options);\n    new Promise(() => {\n      this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();\n    }).catch(() => {});\n  }\n\n  _updateBrowserValues(parseOptions) {\n    if (!this.HAS_DOCUMENT_COOKIE) {\n      return;\n    }\n\n    this.cookies = cookie.parse(document.cookie, parseOptions);\n  }\n\n  _emitChange(params) {\n    for (let i = 0; i < this.changeListeners.length; ++i) {\n      this.changeListeners[i](params);\n    }\n  }\n\n  get(name, options = {}, parseOptions) {\n    this._updateBrowserValues(parseOptions);\n\n    return readCookie(this.cookies[name], options);\n  }\n\n  getAll(options = {}, parseOptions) {\n    this._updateBrowserValues(parseOptions);\n\n    const result = {};\n\n    for (let name in this.cookies) {\n      result[name] = readCookie(this.cookies[name], options);\n    }\n\n    return result;\n  }\n\n  set(name, value, options) {\n    if (typeof value === 'object') {\n      value = JSON.stringify(value);\n    }\n\n    this.cookies = Object.assign(Object.assign({}, this.cookies), {\n      [name]: value\n    });\n\n    if (this.HAS_DOCUMENT_COOKIE) {\n      document.cookie = cookie.serialize(name, value, options);\n    }\n\n    this._emitChange({\n      name,\n      value,\n      options\n    });\n  }\n\n  remove(name, options) {\n    const finalOptions = options = Object.assign(Object.assign({}, options), {\n      expires: new Date(1970, 1, 1, 0, 0, 1),\n      maxAge: 0\n    });\n    this.cookies = Object.assign({}, this.cookies);\n    delete this.cookies[name];\n\n    if (this.HAS_DOCUMENT_COOKIE) {\n      document.cookie = cookie.serialize(name, '', finalOptions);\n    }\n\n    this._emitChange({\n      name,\n      value: undefined,\n      options\n    });\n  }\n\n  addChangeListener(callback) {\n    this.changeListeners.push(callback);\n  }\n\n  removeChangeListener(callback) {\n    const idx = this.changeListeners.indexOf(callback);\n\n    if (idx >= 0) {\n      this.changeListeners.splice(idx, 1);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Volumes/document/GitHub/ASM3/Frontend Assignment 03/client/node_modules/universal-cookie/es6/Cookies.js"],"names":["cookie","hasDocumentCookie","parseCookies","readCookie","Cookies","constructor","cookies","options","changeListeners","HAS_DOCUMENT_COOKIE","Promise","catch","_updateBrowserValues","parseOptions","parse","document","_emitChange","params","i","length","get","name","getAll","result","set","value","JSON","stringify","Object","assign","serialize","remove","finalOptions","expires","Date","maxAge","undefined","addChangeListener","callback","push","removeChangeListener","idx","indexOf","splice"],"mappings":"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","sourcesContent":["import * as cookie from 'cookie';\nimport { hasDocumentCookie, parseCookies, readCookie } from './utils';\nexport default class Cookies {\n    constructor(cookies, options) {\n        this.changeListeners = [];\n        this.HAS_DOCUMENT_COOKIE = false;\n        this.cookies = parseCookies(cookies, options);\n        new Promise(() => {\n            this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();\n        }).catch(() => { });\n    }\n    _updateBrowserValues(parseOptions) {\n        if (!this.HAS_DOCUMENT_COOKIE) {\n            return;\n        }\n        this.cookies = cookie.parse(document.cookie, parseOptions);\n    }\n    _emitChange(params) {\n        for (let i = 0; i < this.changeListeners.length; ++i) {\n            this.changeListeners[i](params);\n        }\n    }\n    get(name, options = {}, parseOptions) {\n        this._updateBrowserValues(parseOptions);\n        return readCookie(this.cookies[name], options);\n    }\n    getAll(options = {}, parseOptions) {\n        this._updateBrowserValues(parseOptions);\n        const result = {};\n        for (let name in this.cookies) {\n            result[name] = readCookie(this.cookies[name], options);\n        }\n        return result;\n    }\n    set(name, value, options) {\n        if (typeof value === 'object') {\n            value = JSON.stringify(value);\n        }\n        this.cookies = Object.assign(Object.assign({}, this.cookies), { [name]: value });\n        if (this.HAS_DOCUMENT_COOKIE) {\n            document.cookie = cookie.serialize(name, value, options);\n        }\n        this._emitChange({ name, value, options });\n    }\n    remove(name, options) {\n        const finalOptions = (options = Object.assign(Object.assign({}, options), { expires: new Date(1970, 1, 1, 0, 0, 1), maxAge: 0 }));\n        this.cookies = Object.assign({}, this.cookies);\n        delete this.cookies[name];\n        if (this.HAS_DOCUMENT_COOKIE) {\n            document.cookie = cookie.serialize(name, '', finalOptions);\n        }\n        this._emitChange({ name, value: undefined, options });\n    }\n    addChangeListener(callback) {\n        this.changeListeners.push(callback);\n    }\n    removeChangeListener(callback) {\n        const idx = this.changeListeners.indexOf(callback);\n        if (idx >= 0) {\n            this.changeListeners.splice(idx, 1);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}